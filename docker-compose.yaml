version: '3.9'
#airflow
x-airflow-common:
  &airflow-common
  image: apache/airflow:2.7.1
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres_airflow_container/airflow
    # For backward compatibility, with Airflow <2.3
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres_airflow_container/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'  # Uncomment to see some tutorials and examples
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.session'
    AIRFLOW__SECRETS__BACKEND: airflow.secrets.local_filesystem.LocalFilesystemBackend
    AIRFLOW__SECRETS__BACKEND_KWARGS: '{"variables_file_path": "/opt/secrets/variables.yaml", 
                                        "connections_file_path": "/opt/secrets/connections.yaml"}'
  volumes:
    - ${AIRFLOW_DAGS}:/opt/airflow/dags
    - ${AIRFLOW_LOGS}:/opt/airflow/logs
    - ${AIRFLOW_PLUGINS}:/opt/airflow/plugins
    - ${AIRFLOW_SECRETS}:/opt/secrets
  networks:
    - cluster_network
  user: '${AIRFLOW_UID:-50000}:0'
  depends_on:
    &airflow-common-depends-on
    postgres_airflow:
      condition: service_healthy

services:
  airflow-webserver:
    <<: *airflow-common
    entrypoint: /bin/bash
    # add after "- |" if you need start dags when container starts
    #    airflow dags unpause *dag_id* &&
    #    airflow dags unpause *dag_id* &&
    #    echo "DAGS *dag_id* and *dag_id* started" &&
    command:
      - -c
      - |
        airflow webserver
    ports:
      - 8080:8080
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"' ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  postgres_airflow:
    hostname: postgres_airflow_container
    container_name: postgres_airflow_container
    image: postgres:12
    networks:
      - cluster_network
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - ./AIRFLOW_DB/file_share/airflow_postgresql_data/:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin"
          echo
        fi
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: '0:0'
    volumes:
      - .:/sources

  # configuration manager for NiFi
  zookeeper:
    hostname: myzookeeper
    container_name: zookeeper_container
    image: 'bitnami/zookeeper:3.7.0'
    # to see crashes when debugging
    # restart: on-failure
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - cluster_network 
  # version control for nifi flows
  registry:
    hostname: myregistry
    container_name: registry_container
    image: 'apache/nifi-registry:1.19.0'
    # to see crashes when debugging
    # restart: on-failure
    ports:
      - "18080:18080"
    environment:
      - LOG_LEVEL=INFO
      - NIFI_REGISTRY_DB_DIR=/opt/nifi-registry/nifi-registry-current/database
      - NIFI_REGISTRY_FLOW_PROVIDER=file
      - NIFI_REGISTRY_FLOW_STORAGE_DIR=/opt/nifi-registry/nifi-registry-current/flow_storage
    volumes:
      - ./NIFI/file_share/nifi_registry/database:/opt/nifi-registry/nifi-registry-current/database
      - ./NIFI/file_share/nifi_registry/flow_storage:/opt/nifi-registry/nifi-registry-current/flow_storage
    networks:
      - cluster_network

  # data extraction, transformation and load service
  nifi:
    hostname: nifi
    container_name: nifi_container
    image: 'apache/nifi:1.19.0'
    # to see crashes when debugging
    # restart: on-failure
    ports:
      - '8091:8080'
    environment:
      - NIFI_WEB_HTTP_PORT=8080
      - NIFI_CLUSTER_IS_NODE=true
      - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
      - NIFI_ZK_CONNECT_STRING=myzookeeper:2181
      - NIFI_ELECTION_MAX_WAIT=30 sec
      - NIFI_SENSITIVE_PROPS_KEY='12345678901234567890A'
    healthcheck:
      test: "${DOCKER_HEALTHCHECK_TEST:-curl localhost:8091/nifi/}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 5
    volumes:
      - ./NIFI/file_share/nifi/database_repository:/opt/nifi/nifi-current/database_repository
      - ./NIFI/file_share/nifi/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      - ./NIFI/file_share/nifi/content_repository:/opt/nifi/nifi-current/content_repository
      - ./NIFI/file_share/nifi/provenance_repository:/opt/nifi/nifi-current/provenance_repository
      - ./NIFI/file_share/nifi/state:/opt/nifi/nifi-current/state
      - ./NIFI/file_share/nifi/logs:/opt/nifi/nifi-current/logs
      # GLOBAL_FILE_SHARE for sharing files between containers
      - ./GLOBAL_FILE_SHARE/:/opt/nifi/nifi-current/external_files
      # folder for Driver Location 
      - ./NIFI/file_share/nifi/drivers:/opt/nifi/nifi-current/drivers
      # uncomment the next line after copying the /conf directory from the container to your local directory to persist NiFi flows
      #- ./NIFI/file_share/nifi/conf:/opt/nifi/nifi-current/conf
    networks:
      - cluster_network
  
  #DWH postgreSQL
  dwh_postgres:
    hostname: dwh_postgres_container
    container_name: dwh_postgres_container
    image: postgres:12
    volumes:
      #path to file share
      - ./DWH/file_share/dwh_postgresql_data/:/var/lib/postgresql/data
      - ./DWH/file_share/init:/docker-entrypoint-initdb.d
      - ./DWH/file_share/dumps/:/var/lib/postgresql/dumps
      - ./GLOBAL_FILE_SHARE/:/var/lib/postgresql/GLOBAL_FILE_SHARE
    #set the DB name, user and password
    environment:
      POSTGRES_USER: 'dwh_postgres'
      POSTGRES_PASSWORD: 'dwh_postgres'
    command: >
      -c work_mem=2048MB
      -c maintenance_work_mem=2048MB
      -c max_wal_size=16384MB
      -c min_wal_size=4096MB
    ports:
        - '5432:5432'
    restart: always
    networks:
      - cluster_network

  #pgadmin
  pgadmin:
    hostname: pgadmin_container
    container_name: pgadmin_container
    image: dpage/pgadmin4:5.7
    environment:
      PGADMIN_DEFAULT_EMAIL: "pgadmin@default.com"
      PGADMIN_DEFAULT_PASSWORD: "pgadminpswrd"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    #path to file share
    volumes:
      - ./PGADMIN/file_share/pgadmin_data/:/var/lib/pgadmin
    ports:
      - '5050:80'
    restart: always
    networks:
      - cluster_network

networks:
  cluster_network:
    driver: bridge